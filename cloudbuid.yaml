# cloudbuild.yaml
substitutions:
  _SERVICE_NAME: front-panaderia
  _REGION: us-central1
  _INSTANCE_NAME: "panaderia-instance"

steps:
# 1. Instalar dependencias de Node.js
- name: 'node:20'
  entrypoint: 'npm'
  args: ['install']
  id: 'npm-install'

# 2. Construir la aplicación de Angular
# Este paso genera los archivos estáticos en el directorio 'dist/'
- name: 'node:20'
  entrypoint: 'npm'
  args: ['run', 'build']
  id: 'npm-build'
  waitFor: ['npm-install']

# 3. Construir la imagen de Docker
# Este paso ahora asume que los archivos de la aplicación ya están construidos.
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID', '.']
  id: 'docker-build'
  waitFor: ['npm-build']

# 4. Subir la imagen de Docker a Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID']
  id: 'docker-push'
  waitFor: ['docker-build']

# 5. Desplegar a Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - '$_SERVICE_NAME'
  - '--image=gcr.io/$PROJECT_ID/$_SERVICE_NAME:$BUILD_ID'
  - '--region=$_REGION'
  - '--platform=managed'
  - '--allow-unauthenticated' # Necesario para que el frontend sea público
  - '--set-env-vars=APP_NAME=$_SERVICE_NAME,INSTANCE_NAME=$_INSTANCE_NAME,REGION=$_REGION'
  waitFor: ['docker-push']